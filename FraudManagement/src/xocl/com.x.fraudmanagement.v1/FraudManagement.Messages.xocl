/*
 * By convention, messages and supporting types for a domain reside in the file <domain>.Messages.xocl
 * The XOCL type notation is similar to the AVDL type notation.
 */

/*
 */
package com.x.fraudmanagement.v1
{
	import com.x.core.v1.*
	
	/*
	 * 
	 */
    record CheckoutSignatureCreate {
    	string signatureData
    }
    
    /*
     */
    record CheckoutSignatureCreateSucceeded extends CheckoutSignatureCreate {
    	string signatureId "Unique signature id used for future lookup"
    }
    
    record CheckoutSignatureCreateFailed {
    	string? signatureData
        array<Error> errors
    }

	record OrderLineData {
		string? orderLineId "Unique identifier of an item."
		string? itemId "Ordered index of an item (also referred to as line number)."
		float quantity "How many of an item are ordered."
		CurrencyAmount price "Unit cost of the item"		
	}
	
	record Order {
		string orderNumber "Unique order identifier generated by the originator of the order."
		string dateOrdered  "Date an item was ordered."
		CurrencyAmount grandTotal "Total amount paid by the customer (total amount of items, fees, taxes, etc.) for the order."
    	string processorTransactionNumber "The payment processor's transaction number for the order"
    	string processorAuthorizationCode "The payment processor's authorization response code"
    	string? card "first six and last four digits" 
		array<OrderLineData> orderLines "Array of order lines." 
	}

	/*
	 * 
	 */
    record CheckoutDetailCreate {
    	string? storeDescription "Used to distinguish the store that took the order for merchants with multiple stores"
		string? pageHTML "HTML used to build the page being captured"
		string? termsAndConditions "Specific terms and conditions for the order presented to the shopper"
		string? customerIp "The IP used by the shopper during the transaction"
		string? captureUserAgent "The shopper's browser User Agent header"
		string? id "A vendor specified Id referencing the customer's fraud profile"
    	string? signatureId "An id referencing a signature previously captured in the checkout"
		
		Order order
    }
     
    /*
     */
    record CheckoutDetailCreateSucceeded {
    	string id "This id is used to lookup the checkout details in future transactions"
    }
    
    record CheckoutDetailCreateFailed {
    	string? id
        array<Error> errors
    }
    
    record LookupCheckoutSignature {
	    /*
	     * By convention, a lookup includes the ID of the object being requested.
	     */
        string signatureId 
    }
    
 
    record LookupCheckoutSignatureSucceeded extends LookupCheckoutSignature {
    	string signature
    }
    
    record LookupCheckoutSignatureFailed extends LookupCheckoutSignature {
        array<Error> errors
    }
    
    enum Exposure {
    	LOW
    	MEDIUM
    	HIGH
    }
    
    record FraudExposure {
    	string exposureRating "Implementation specific value representing the exposure represented"
    	Exposure exposureRank "Normalization of the exposure into a common ranking"
    }
    
    record LookupFraudExposure {
        string id "A reference to a previous fraud profiling session"
    }
 
    record LookupFraudExposureSucceeded extends LookupFraudExposure {
    	FraudExposure exposure
    }
    
    record LookupFraudExposureFailed extends LookupFraudExposure {
        array<Error> errors
    }

    record ScreenCapture {
    	bytes screenCapture
    }
    
    record LookupScreenCapture {
        string pageId "The unique identifier of the page being requested"
    }
 
    record LookupScreenCaptureSucceeded extends LookupScreenCapture {
    	ScreenCapture screen
    }
    
    record LookupScreenCaptureFailed extends LookupScreenCapture {
        array<Error> errors
    }

}
