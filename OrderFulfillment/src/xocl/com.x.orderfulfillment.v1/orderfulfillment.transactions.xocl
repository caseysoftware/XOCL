/** This file includes the transactions that are part of the
 *  order fulfillment domain
 */
package com.x.orderfulfillment.v1 {
	import com.x.orderfulfillment.v1.*
	
	transaction ProcessDropshipFulfillment(Fulfillment fulfillment) notify {
		description "Sends a notification that a dropship fulfillment needs to be processed."
		sender
		{	
			message ProcessDropshipFulfillment {
            	timeouts(validation=3m)
            	retries=3
            }
		}		
	 	postconditions {
	 		success(fulfillment[Fulfillment.Created])	 		
	 	}
	}
	
	transaction ProcessThirdPartyFulfillment(Fulfillment fulfillment) notify {
		description "Sends a notification that a third-party fulfillment needs to be processed."
		sender
		{	
			message ProcessThirdPartyFulfillment {   
            	timeouts(validation=3m)
            	retries=3
            }            
        }		
	 	postconditions {
	 		success(fulfillment[Fulfillment.Created])	 		
	 	}
		
	}	
	
	transaction FulfillmentCompleted(Fulfillment fulfillment) notify {
		description "Sends a notification that the fulfillment processing was completed."
    	preconditions(fulfillment[Fulfillment.Cancelled], fulfillment[Fulfillment.Shipped])
    	sender
		{
			message FulfillmentCompleted {
            	timeouts(validation=3m)
            	retries=3
            }
		}
		postconditions {
	 		success(fulfillment[Fulfillment.Complete])	 		
	 	}
    }
	
	
	transaction FulfillmentExpectedShipDateUpdated notify {
 		description "Sends a notification that the expected ship date was updated for all or part of the fulfillment."
    	sender {
    		message FulfillmentExpectedShipDateUpdated {
            	timeouts(validation=3m)
            	retries=3
            }
    	}
    }
	
	//Notifies a drop ship suppliers comment
	transaction DropShipSupplierComment notify {
 		description "Sends a comment from the dropship supplier."
    	sender {
    		message DropShipSupplierComment {
            	timeouts(validation=3m)
            	retries=3
            }
    	}
    }
    
    //Notifies a merchants comment
	transaction MerchantComment notify {
		description "Sends a comment from a merchant."
    	sender {
    		message MerchantComment {
            	timeouts(validation=3m)
            	retries=3
            }
    	}
    }
    
	transaction FulfillmentShipped notify {		
		description "Sends a notification that all or part of the fulfillment was shipped."
    	sender {
    		message FulfillmentShipped {
            	timeouts(validation=3m)
            	retries=3
            }
    	}
    }    
     
	transaction FulfillmentCancelled notify {
		description "Sends a notification that all or part of the fulfillment was cancelled."
        sender {
        	message FulfillmentCancelled {
        		timeouts(validation=3m)     		
        		retries=3
        	}
        }
    }
    
    transaction SearchShippingRate query {
    	description "Retrieves the shipping rate for a fulfillment."
    	sender {
    		message SearchShippingRate{
    			timeouts(response=30s)
    			retries=0   
    		}
    	}
    	receiver {
        	success SearchShippingRateSucceeded  
        	failure SearchShippingRateFailed
        }
    }

    transaction MerchantHoldFulfillment(Fulfillment fulfillment) notify {
    	description "Sends a notification that all or part of a fulfillment should be held from further processing."
    	sender{
    		message MerchantHoldFulfillment{
    			timeouts(validation=3m)     		
        		retries=3
    		}
    	}
    }
    
    transaction FulfillmentProcessorHoldFulfillment(Fulfillment fulfillment) notify {
    	description "Sends a notification that all or part of a fulfillment should be held from further processing."
    	sender{
    		message FulfillmentProcessorHoldFulfillment{
    			timeouts(validation=3m)     		
        		retries=3
    		}
    	}
    }
    
    // Notifies that whole/parts of fulfillment should be released for further processing
    transaction ReleaseFulfillment(Fulfillment fulfillment) notify {
    	description "Sends a notification that all or part of a fulfillment should be released for further processing."
    	sender{
    		message ReleaseFulfillment{
    			timeouts( validation=3m)
    			retries=3   
    		}
    	}
    }
    
    transaction FulfillmentInformationUpdated notify {
    	description "Sends a notification that all or part of a fulfillment was updated."
    	sender{
    		message FulfillmentInformationUpdated{
    			timeouts( validation=3m) 
    			retries=3 
    		}
    	}
    }
    
    transaction LookupFulfillments query {
    	description "Retrieves all the fulfillment for an order number."
    	sender {
    		message LookupFulfillments{
    			timeouts(response=30s)
    			retries=0    
    		}
    	}
    	receiver {
        	success LookupFulfillmentsSucceeded   
        	failure LookupFulfillmentsFailed
        }
    }
    
    transaction CancelFulfillment notify {
    	description "Sends a notification that all or part of a fulfillment should be cancelled."
    	sender{
    		message CancelFulfillment{
    			timeouts( validation=3m) 
    			retries=3 
    		}
    	}
    }
    
    transaction FulfillmentProcessorCancelFulfillment notify {
    	description "Sends a notification that all or part of a fulfillment should be cancelled."
    	sender{
    		message FulfillmentProcessorCancelFulfillment{
    			timeouts( validation=3m) 
    			retries=3 
    		}
    	}
    }
    
    
    transaction ProcessReceiving(Receiving receiving) notify {
    	sender{
    		description "Sends a notification that data pertaining to future expected inventory (receiving) should be processed."
    		message ProcessReceiving{
    			timeouts( validation=3m)
    			retries=3  
    		}
    	}
    	postconditions {
	 		success(receiving[Receiving.Created])	 		
	 	}
    }
    
    transaction UpdateReceiving notify {
    	description "Sends a notification that previously provided information for receiving should be updated."
    	sender{
    		message UpdateReceiving{
    			timeouts( validation=3m)
    			retries=3  
    		}
    	}
    }
    
    transaction ReceivingInventoryStatusUpdated notify {
    	description "Sends a notification that the status was updated for all or part of receiving inventory."
    	sender{
    		message ReceivingInventoryStatusUpdated{
    			timeouts( validation=3m)
    			retries=3  
    		}
    	}
    }
    
    transaction ReceivingCompleted(Receiving receiving) notify {
    	description "Sends a notification that the processing of a receiving was completed."
    	sender{
    		message ReceivingCompleted{
    			timeouts( validation=3m)
    			retries=3  
    		}
    	}
    	postconditions {
	 		success(receiving[Receiving.Created])	 		
	 	}
    }
    
     transaction CancelReceiving notify {
     	description "Sends a notification that all or part of the inventory should be cancelled."
    	sender{
    		message CancelReceiving{
    			timeouts( validation=3m)
    			retries=3  
    		}
    	}
    }
    
    transaction LookupReceivings query {
    	description "Retrieves receivings for a purchase order number."
    	sender {
    		message LookupReceivings{
    			timeouts(response=30s)
    			retries=0    
    		}
    	}
    	receiver {
        	success LookupReceivingsSuceeded
        	failure LookupReceivingsFailed
        }
    }
    
     transaction ProcessReturnAdvanceShipmentNotice notify {
    	description "Sends a notification of a return advance shipping notice that needs to be processed."
    	sender{
    		message ProcessReturnAdvanceShipmentNotice{
    			timeouts( validation=3m)
    			retries=3  
    		}
    	}
    }
    
    transaction UpdateReturnAdvanceShipmentNotice (Return returns) notify {
    	description "Sends a notification that a return advance shipping notice, which was previously sent, needs to be updated."
    	preconditions (returns[Return.Expected])
    	sender{
    		message UpdateReturnAdvanceShipmentNotice{
    			timeouts( validation=3m)
    			retries=3  
    		}
    	}
    }
    
    transaction CancelReturnAdvanceShipmentNotice (Return returns) notify {
    	description "Sends a notification that a return advance shipping notice, which was previously sent, needs to be cancelled."
    	preconditions (returns[Return.Expected])
    	sender{
    		message CancelReturnAdvanceShipmentNotice{
    			timeouts( validation=3m)
    			retries=3  
    		}
    	}
    	postconditions {
          	success(returns[Return.Cancelled])          		
        }
    }
    
    transaction ReturnReceived notify {
    	description "Sends a notification that a product was returned with or without an advance shipping notice."
    	sender{
    		message ReturnReceived{
    			timeouts( validation=3m)
    			retries=3  
    		}
    	}
    }
    
    transaction ReturnProcessCompleted(Return returns) notify {
    	description "Sends a notification that the returns processing is complete."
    	sender{
    		message ReturnProcessCompleted{
    			timeouts( validation=3m)
    			retries=3  
    		}
    	}
    	postconditions {
          	success(returns[Return.Complete])          		
        }
    }
    
}
