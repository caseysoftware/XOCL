package com.x.invoicing.v1
{
	import com.x.invoicing.v1.*
	import com.x.core.v1.*
	
	transaction CreateInvoice(Invoice invoice) response
	{
    	description "Create invoice."
    	preconditions (!exists(invoice))
        sender
        {
        	message CreateInvoice
        	{
        		timeouts(receipt=30s, response=3m)     		
        		retries=3
        	}
        }
        receiver
        {
			success CreateInvoiceSucceeded
			{       
				timeouts(receipt=30s, validation=3m)
            	retries=3
            }
            
            failure CreateInvoiceFailed
            {
            	timeouts(receipt=30s)
            }
        }
        postconditions
        {
        	success (exists(invoice) && invoice[Invoice.Created])
        	failure (!exists(invoice))
        }
    }
    
    transaction InvoiceCreated inform
    {
    	sender
        {
        	message InvoiceCreated{
        	}
        }
    }
    
    transaction SendInvoice(Invoice invoice) response
    {
    	description "Send invoice"
    	preconditions (invoice[Invoice.Created] || invoice[Invoice.Sent])
    	sender
    	{
    		message SendInvoice
    		{
    			timeouts(receipt=30s, response=3m)     		
        		retries=3
    		}
    	}
    	receiver
    	{
    		success SendInvoiceSucceeded
			{       
				timeouts(receipt=30s, validation=3m)  // check others - validation needed if business data returned.
            	retries=3
            }
            
            failure SendInvoiceFailed
            {
            	timeouts(receipt=30s)
            }
    	}
    	postconditions
    	{
    		success (invoice[Invoice.Sent])
    	}
    }
    
    transaction InvoiceSent inform
    {
    	sender
        {
        	message InvoiceSent
        }
    }
    
    transaction CompleteInvoice(Invoice invoice) response
    {
    	description "Complete invoice"
    	preconditions (invoice[Invoice.Created] || invoice[Invoice.Sent])
    	sender
    	{
    		message CompleteInvoice
    		{
    			timeouts(receipt=30s, response=3m)     		
        		retries=3
    		}
    	}
    	receiver
    	{
    		success CompleteInvoiceSucceeded
			{       
				timeouts(receipt=30s, validation=3m)  // check others - validation needed if business data returned.
            	retries=3
            }
            
            failure CompleteInvoiceFailed
            {
            	timeouts(receipt=30s)
            }
    	}
    	postconditions
    	{
    		success (invoice[Invoice.Complete])
    	}
    }
    
    transaction InvoiceCompleted inform
    {
    	sender
        {
        	message InvoiceCompleted
        }
    }
    
    transaction LookupInvoice query
    {
    	description "Retrieves the details for one invoice based on id."
    	sender
        {
        	message LookupInvoice
        	{
        		timeouts(response=30s)     		
        	}
        }
        receiver
        {
        	success LookupInvoiceSucceeded
            failure LookupInvoiceFailed
        } 
    }
    
    transaction SearchInvoice query
    {
    	description "Retrieves the details for invoices based on logical search criteria."
    	sender
        {
        	message SearchInvoice
        	{
        		timeouts(response=30s)     		
        	}
        }
        receiver
        {
        	success SearchInvoiceSucceeded
            failure SearchInvoiceFailed
        } 
    }
    
    transaction CancelInvoice(Invoice invoice) response
    {
    	description "Cancels the invoice based on id."
    	preconditions (exists(invoice), !invoice[Invoice.Cancelled], !invoice[Invoice.Complete])
    	sender
    	{
    		message CancelInvoice
    		{
    			timeouts(receipt=30s, response=3m)     		
        		retries=3
    		}
    	}
    	receiver
    	{
    		success CancelInvoiceSucceeded
			{       
				timeouts(receipt=30s, validation=3m)
            	retries=3
            }
            
            failure CancelInvoiceFailed
            {
            	timeouts(receipt=30s)
            }
    	}
    	postconditions
    	{
    		success (invoice[Invoice.Cancelled])
    	}
    }
    
    transaction InvoiceCancelled inform
    {
    	sender
        {
        	message InvoiceCancelled
        }
    }
    
    transaction UpdateInvoiceStatus(Invoice invoice) response
    {
    	description "Updates the invoice status based on id."
    	preconditions (exists(invoice), invoice[Invoice.Created] || invoice[Invoice.Sent])
    	sender
    	{
    		message UpdateInvoiceStatus
    		{
    			timeouts(receipt=30s, response=3m)     		
        		retries=3
    		}
    	}
    	receiver
    	{
    		success UpdateInvoiceStatusSucceeded
			{       
				timeouts(receipt=30s, validation=3m)
            	retries=3
            }
            
            failure UpdateInvoiceStatusFailed
            {
            	timeouts(receipt=30s)
            }
    	}
    }
    
    transaction InvoiceStatusUpdated inform
    {
    	sender
        {
        	message InvoiceStatusUpdated
        }
    }
    
    transaction UpdateInvoiceDetails(Invoice invoice) response
    {
    	description "Updates the invoice details based on id."
    	preconditions (exists(invoice), invoice[Invoice.Created] || invoice[Invoice.Sent])
    	sender
    	{
    		message UpdateInvoiceDetails
    		{
    			timeouts(receipt=30s, response=3m)     		
        		retries=3
    		}
    	}
    	receiver
    	{
    		success UpdateInvoiceDetailsSucceeded
			{       
				timeouts(receipt=30s, validation=3m)
            	retries=3
            }
            
            failure UpdateInvoiceDetailsFailed
            {
            	timeouts(receipt=30s)
            }
    	}
    }
    
    transaction InvoiceContentsUpdated inform
    {
    	sender
        {
        	message InvoiceContentsUpdated
        }
    }
    
    transaction UpdateInvoiceMerchantData(Invoice invoice) response
    {
    	description "Updates the invoice merchant data based on id."
    	preconditions (exists(invoice), invoice[Invoice.Created] || invoice[Invoice.Sent])
    	sender
    	{
    		message UpdateInvoiceMerchantData
    		{
    			timeouts(receipt=30s, response=3m)     		
        		retries=3
    		}
    	}
    	receiver
    	{
    		success UpdateInvoiceMerchantDataSucceeded
			{       
				timeouts(receipt=30s, validation=3m)
            	retries=3
            }
            
            failure UpdateInvoiceMerchantDataFailed
            {
            	timeouts(receipt=30s)
            }
    	}
    }
    
    transaction UpdateInvoiceCustomerData(Invoice invoice) response
    {
    	description "Updates the invoice customer data based on id."
    	preconditions (exists(invoice), invoice[Invoice.Created] || invoice[Invoice.Sent])
    	sender
    	{
    		message UpdateInvoiceCustomerData
    		{
    			timeouts(receipt=30s, response=3m)     		
        		retries=3
    		}
    	}
    	receiver
    	{
    		success UpdateInvoiceCustomerDataSucceeded
			{       
				timeouts(receipt=30s, validation=3m)
            	retries=3
            }
            
            failure UpdateInvoiceCustomerDataFailed
            {
            	timeouts(receipt=30s)
            }
    	}
    }

    transaction UpdateInvoiceShippingData(Invoice invoice) response
    {
    	description "Updates the invoice shipping data based on id."
    	preconditions (exists(invoice), invoice[Invoice.Created] || invoice[Invoice.Sent])
    	sender
    	{
    		message UpdateInvoiceShippingData
    		{
    			timeouts(receipt=30s, response=3m)     		
        		retries=3
    		}
    	}
    	receiver
    	{
    		success UpdateInvoiceShippingDataSucceeded
			{       
				timeouts(receipt=30s, validation=3m)
            	retries=3
            }
            
            failure UpdateInvoiceShippingDataFailed
            {
            	timeouts(receipt=30s)
            }
    	}
    }

    transaction UpdateInvoiceBillingData(Invoice invoice) response
    {
    	description "Updates the invoice billing data based on id."
    	preconditions (exists(invoice), invoice[Invoice.Created] || invoice[Invoice.Sent])
    	sender
    	{
    		message UpdateInvoiceBillingData
    		{
    			timeouts(receipt=30s, response=3m)     		
        		retries=3
    		}
    	}
    	receiver
    	{
    		success UpdateInvoiceBillingDataSucceeded
			{       
				timeouts(receipt=30s, validation=3m)
            	retries=3
            }
            
            failure UpdateInvoiceBillingDataFailed
            {
            	timeouts(receipt=30s)
            }
    	}
    }
 
    transaction UpdateInvoiceItemData(Invoice invoice) response
    {
    	description "Updates the invoice item data based on id."
    	preconditions (exists(invoice), invoice[Invoice.Created] || invoice[Invoice.Sent])
    	sender
    	{
    		message UpdateInvoiceItemData
    		{
    			timeouts(receipt=30s, response=3m)     		
        		retries=3
    		}
    	}
    	receiver
    	{
    		success UpdateInvoiceItemDataSucceeded
			{       
				timeouts(receipt=30s, validation=3m)
            	retries=3
            }
            
            failure UpdateInvoiceItemDataFailed
            {
            	timeouts(receipt=30s)
            }
    	}
    }
}
