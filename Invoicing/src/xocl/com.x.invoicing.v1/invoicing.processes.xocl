package com.x.invoicing.v1{
	import com.x.invoicing.v1.*
	import com.x.core.v1.*

	entity Invoice
	{
		description "Entity that represents the various states of an invoice"
        state Created [Sent, Cancelled]
        state Sent [Cancelled, Complete] 
        state Cancelled
        state Complete
	}
	
	process InvoiceProcessing(Invoice invoice)
	{
		description "Invoice processing"
		roles
		{
			InvoicingClient
			InvoicingManager
			InvoicingObserver
		}	
		
		preconditions (!exists(invoice))
		
		workflow
		{
			transaction CreateInvoice
			{
				roles (InvoicingClient, InvoicingManager)
			}
			workflow InvoiceCreated
			{
				roles (InvoicingManager, null)
			}
			
			do(!invoice[Invoice.Complete] && !invoice[Invoice.Cancelled]) {
				description "While the invoice is not complete or cancelled, several things can occur in any order"	 	 		 	    	
		 	 	any {
		 	 		noop
		 	 		all
		 	 		{
		 	 			description "Send invoice to customer"
		 	 			transaction SendInvoice
						{
							roles (InvoicingClient, InvoicingManager)
						}
						workflow InvoiceSent
						{
							roles (InvoicingManager, null) // make this change throughout
						}
		 	 		}
		 	 		all
		 	 		{
		 	 			description "Cancel an invoice"
		 	 			transaction CancelInvoice
						{
							roles (InvoicingClient, InvoicingManager)
						}
						workflow InvoiceCancelled
						{
							roles(InvoicingManager, null)
						}
		 	 		}
		 	 		all
		 	 		{
		 	 			description "Update invoice status (paid, unpaid, refunded)"
		 	 			transaction UpdateInvoiceStatus
						{
							roles (InvoicingClient, InvoicingManager)
						}
						workflow InvoiceStatusUpdated
						{
							roles(InvoicingManager, null)
						}
		 	 		}
		 	 		all
		 	 		{
		 	 			description "Update invoice details"
		 	 			transaction UpdateInvoiceDetails
						{
							roles (InvoicingClient, InvoicingManager)
						}
						workflow InvoiceContentsUpdated
						{
							roles(InvoicingManager, null)
						}
		 	 		}
		 	 		all
		 	 		{
		 	 			description "Update merchant details"
		 	 			transaction UpdateInvoiceMerchantData
						{
							roles (InvoicingClient, InvoicingManager)
						}
						workflow InvoiceContentsUpdated
						{
							roles(InvoicingManager, null)
						}
		 	 		}
		 	 		all
		 	 		{
		 	 			description "Update invoice customer details"
		 	 			transaction UpdateInvoiceCustomerData
						{
							roles (InvoicingClient, InvoicingManager)
						}
						workflow InvoiceContentsUpdated
						{
							roles(InvoicingManager, null)
						}
		 	 		}
		 	 		all
		 	 		{
		 	 			description "Update invoice shipping details"
		 	 			transaction UpdateInvoiceShippingData
						{
							roles (InvoicingClient, InvoicingManager)
						}
						workflow InvoiceContentsUpdated
						{
							roles(InvoicingManager, null)
						}
		 	 		}
		 	 		all
		 	 		{
		 	 			description "Update invoice billing details"
		 	 			transaction UpdateInvoiceBillingData
						{
							roles (InvoicingClient, InvoicingManager)
						}
						workflow InvoiceContentsUpdated
						{
							roles(InvoicingManager, null)
						}
		 	 		}
		 	 		all
		 	 		{
		 	 			description "Update invoice item data"
		 	 			transaction UpdateInvoiceItemData
						{
							roles (InvoicingClient, InvoicingManager)
						}
						workflow InvoiceContentsUpdated
						{
							roles(InvoicingManager, null)
						}
		 	 		}
		 	 	}
			}
		}
		
		postconditions
		{
			success (invoice[Invoice.Cancelled] || invoice[Invoice.Complete])
		}
	}
	
	process InvoiceCreated
	{
		roles
		{
			InvoicingManager
			InvoicingObserver
		}
	}
	
	workflow InvoiceCreated implements InvoiceCreated
	{
		transaction InvoiceCreated
		{
			roles (InvoicingManager, InvoicingObserver)
		}
	}

	process InvoiceSent	{
		roles
		{
			InvoicingManager
			InvoicingObserver
		}
	}
	
	workflow InvoiceSent implements InvoiceSent
	{
		transaction InvoiceSent
		{
			roles (InvoicingManager, InvoicingObserver)
		}
	}
	
	process InvoiceLookup(Invoice invoice)
	{
		roles
		{
			InvoicingClient "Client of the invoicing system"
			InvoicingManager "Manager of the invoicing system"
		}
		
		preconditions (exists(invoice))
		
		workflow
		{
			transaction LookupInvoice
			{
				roles (InvoicingClient, InvoicingManager)
			}
		}
	}
	
	process InvoiceSearch
	{
		roles
		{
			InvoicingClient "Client of the invoicing system"
			InvoicingManager "Manager of the invoicing system"
		}
		
		workflow
		{
			transaction SearchInvoice
			{
				roles (InvoicingClient, InvoicingManager)
			}
		}
	}
	
	process InvoiceCancelled
	{
		roles
		{
			InvoicingManager "Manager of the invoicing system"
			InvoicingObserver "Observer of invoicing transactions"
		}
	}
	
	workflow InvoiceCancelled implements InvoiceCancelled
	{
		transaction InvoiceCancelled
		{
			roles (InvoicingManager, InvoicingObserver)
		}
	}

	process InvoiceStatusUpdated
	{
		roles
		{
			InvoicingManager "Manager of the invoicing system"
			InvoicingObserver "Observer of invoicing transactions"
		}
	}
	
	workflow InvoiceStatusUpdated implements InvoiceStatusUpdated
	{
		transaction InvoiceStatusUpdated
		{
			roles (InvoicingManager, InvoicingObserver)
		}
	}

	process InvoiceContentsUpdated
	{
		roles
		{
			InvoicingManager "Manager of the invoicing system"
			InvoicingObserver "Observer of invoicing transactions"
		}
	}
	
	workflow InvoiceContentsUpdated implements InvoiceContentsUpdated
	{
		transaction InvoiceContentsUpdated
		{
			roles (InvoicingManager, InvoicingObserver)
		}
	}
}
