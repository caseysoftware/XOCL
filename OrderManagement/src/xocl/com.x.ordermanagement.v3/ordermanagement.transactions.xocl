/** This file includes the transactions that are part of the
 *  order management domain
 */
package com.x.ordermanagement.v3 {
	packagetitle "Order Management"
	
	import com.x.ordermanagement.v3.*
	
	transaction ProcessOrder<MarketplaceOrder> response {
		description "Requests an order processor to process an order."
		sender {
			message ProcessOrder {
            	timeouts(response=30s)
            	retries=3
            }
			message<MarketplaceOrder> ProcessMarketplaceOrder {
            	timeouts(response=30s)
            	retries=3
            }
		}
		
		receiver {
			success ProcessOrderSucceeded {
            	timeouts(validation=3m)
            	retries=3
            }
			failure ProcessOrderFailed
		}
	}
	
	transaction SubmitOrder<MarketplaceOrder>(Order order) response {
		description "Submits a shipped order to the order processor."
		
		sender {
			message SubmitOrder {
            	timeouts(response=30s)
            	retries=3
            }
			message<MarketplaceOrder> SubmitMarketplaceOrder {
            	retries=3
            }
		}
		
		receiver {
			success SubmitOrderSucceeded {
            	retries=3
            }
			failure SubmitOrderFailed
		}
	}
	
	transaction OrderShipped<MarketplaceOrder>(Order order) notify {
		description "Updates the shipment tracking information for an order."
		
		sender
		{
			message OrderShipped {
				timeouts(validation=10s)
            	retries=3
            }
            message<MarketplaceOrder> MarketplaceOrderShipped {
				timeouts(validation=10s)
            	retries=3
            }            
		}
		
		postconditions {
			success(order[Order.Complete])
		}
	}
	
	transaction ObserveOrderShipped<MarketplaceOrder> inform {
		description "Notifies observers that an order has shipped."
		sender {
			message ObserveOrderShipped 
            message<MarketplaceOrder> ObserveMarketplaceOrderShipped 
		}		
	}
    
    transaction OrderCreated inform {
    	description "Notifies observers that an order was created."
        sender {
        	message OrderCreated
        }
    }
    
	transaction CancelOrder<MarketplaceOrder>(Order order) response {
		description "Cancels an order."
		
        sender {
        	message CancelOrder {
        		timeouts(response=3m)     		
        		retries=3
        	}
        	message<MarketplaceOrder> CancelMarketplaceOrder {
        		timeouts(response=3m)     		
        		retries=3
        	}
        }
        receiver {
        	success CancelOrderSucceeded {
            	retries=3
            }
                        
        	success<MarketplaceOrder> CancelMarketplaceOrderSucceeded {
            	retries=3
            }            
            
            failure CancelOrderFailed
            failure<MarketplaceOrder> CancelMarketplaceOrderFailed
        }
		postconditions {
			success(order[Order.Complete])
		}
    }
    
    transaction OrderCancelled<MarketplaceOrder> inform {
    	description "Notification that an order was cancelled."
        sender {
        	message OrderCancelled
        	message<MarketplaceOrder> MarketplaceOrderCancelled
        }
    }
      
    transaction SearchOrder<NonSensitive, MarketplaceOrderSearch> query {
    	description "Searches for an order."
        sender {
        	message SearchOrder {
        		 timeouts(response=30s)     		
        	}
        	message <MarketplaceOrderSearch> MarketplaceSearchOrder {
        		 timeouts(response=30s)     		        		
        	}
        }
        receiver {
        	success SearchOrderSucceeded   
        	success<MarketplaceOrderSearch> MarketplaceSearchOrderSucceeded   
        	success<NonSensitive> SearchNonSensitiveOrderSucceeded           
                    	        
            failure SearchOrderFailed
        	failure<MarketplaceOrderSearch> MarketplaceSearchOrderFailed   
        } 
    }
    
    transaction ShippingInformationUpdate<MarketplaceOrder> notify {
    	description "Updates the shipping information. For example, updating accountID, siteCode, sourceID, etc. for marketplace order."
        sender {
        	message ShippingInformationUpdate {
            	timeouts(validation=3m)
            	retries=3
        	}
        	message <MarketplaceOrder> MarketplaceShippingInformationUpdate {
            	timeouts(validation=3m)
            	retries=3
        	}
        }
    }
    
    transaction OrderReturn(Order order) inform {
    	description "Notifies observers that an entire order has been returned."
    	sender {
    		message OrderReturn
    	}
    	
    	postconditions {
 			success(order[Order.Complete])
    	}
    }
    
    transaction PartialOrderReturn(Order order) inform {
    	description "Notifies observers that part of an order was partially returned."
    	sender {
    		message PartialOrderReturn
    	}
    	
    	postconditions {
    		success(order[Order.PartiallyReturned])
    	}
    }
    
    transaction PartialOrderShip(Order order) inform {
    	description "Notifies observers that part of an order was partially shipped."
    	sender {
    		message PartialOrderShip
    	}
    	
    	postconditions {
    		success(order[Order.PartiallyShipped])
    	}
    }
    
    transaction PartialOrderCancel(Order order) inform {
    	description "Notifies observers that part of an order was partially cancelled."
    	sender {
    		message PartialOrderCancel
    	}
    	
    	postconditions {
    		success(order[Order.PartiallyCancelled])
    	}
    }
    
    transaction OrderAdjust inform {
    	description "Notifies observers that an order was adjusted."
    	sender {
    		message OrderAdjust
    	}
    }
    
    transaction PaymentUpdate<MarketplaceOrder> response {
    	description "Updates the payment information."
    	sender {
    		message PaymentUpdate {
    			timeouts(response=30s)    		
        	}
        	message <MarketplaceOrder> MarketplacePaymentUpdate {
    			timeouts(response=30s)    		
        	}
        }
        receiver {
        	success PaymentUpdateSucceeded                       	        
        	success <MarketplaceOrder> MarketplacePaymentUpdateSucceeded                       	        
            failure PaymentUpdateFailed
            failure <MarketplaceOrder> MarketplacePaymentUpdateFailed
        } 
    }
    
    transaction CompleteOrder(Order order) notify {
    	description "Marks the current order as being complete."
        sender {
        	message CompleteOrder {
            	timeouts(validation=3m)
            	retries=3
        	}
        }
        
        postconditions {
    		success(order[Order.Complete])
    	}
    }
}