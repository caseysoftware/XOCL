/** This file includes the processes that are part of the
 *  order management domain
 */
package com.x.ordermanagement.v3 {
	packagetitle "Order Management"
	
	import com.x.ordermanagement.v3.*
	import com.x.customer.v1.*
	
	entity Order {
		summary "Specifies the state of the order and the next valid states if any."
		description "Defines the values used to specify the state of the order and the next valid states if any."
		
    	state Submitted[PartiallyShipped, PartiallyCancelled, PartiallyReturned, Complete] "Order has been submitted."
    	state PartiallyShipped[PartiallyCancelled, PartiallyReturned, Complete] "Order has shipped."
    	state PartiallyCancelled[PartiallyShipped, PartiallyReturned, Complete] "Order has been partially cancelled."
    	state PartiallyReturned[PartiallyShipped, PartiallyCancelled, Complete] "Order has been partially returned."
    	state Complete "Order has been considered complete."
    }
    
    process OrderSearch<NonSensitive, MarketplaceOrderSearch> {
    	
    	summary "Searches for orders based on the search criteria provided."
    	description "Searches for orders based on the search criteria provided."
    	
    	roles {
    		OrderManager "Searches for orders." 
    		OrderConsumer "Submits a request to query for orders."
    	}
    	
    	workflow {
    		    		
    		summary "Searches for orders."
    		description "Searches for orders and returns the results or a failed message."
    		
    		transaction SearchOrder<NonSensitive, MarketplaceOrderSearch> {
    			roles (OrderConsumer,OrderManager)
    		}   
    	}
    }
    
    process UpdateSalesChannelShippingInformation<MarketplaceOrder> {
		summary "Submit updated shipping information to a sales channel."
    	description "Submit updated shipping information to a sales channel." 
    	
    	roles {   		
    		OrderProcessor "Submits updated shipping information to a sales channel." 
    		SalesChannel "Receives updated shipping information from a sales channel."
    	}
    	
    	workflow {
			summary "Submit updated shipping information to a sales channel."
	    	description "Submit updated shipping information to a sales channel." 
		
			transaction ShippingInformationUpdate<MarketplaceOrder> {
				roles(OrderProcessor, SalesChannel)
			}
		}
	}
    
    
    process SubmitShippedOrder<MarketplaceOrder>(Order order) {
    	
    	summary "Submits an order to the processor that has already been shipped."
    	description "Submits an order to the OrderProcessor that has already been shipped." 
    	
    	roles {		
    		SalesChannel "Submits an order to the order processor." 
    		OrderProcessor "Receives an order from a sales channel."
    	}
    	
    	workflow {
    		
    		summary "Submits an order, which has already been shipped, to the OrderProcessor."
    		description "Submits an order, which has already been shipped, to the OrderProcessor."
    		
    		transaction SubmitOrder<MarketplaceOrder> {
    			roles (SalesChannel, OrderProcessor)
    		}   
    	}
    }
    
    process ProcessSalesChannelOrder<MarketplaceOrder>(Order order) {
    	
    	summary "Processes an order that originates from a sales channel."
        description "An order is submitted from and sales channel and is processed by making adjustments, changing the status, etc. and notifies observers of the action performed. Note: Use OrderReturn ONLY when all the items in an order are returned at the same time. For all other returns, use PartialOrderReturn. For example, a buyer orders two items. Returns one item and later returns the second item. You would use PartialOrderReturn for both of these returns."
        
        roles {
        	SalesChannel "Submits the order for processing."
        	OrderProcessor "Performs the order processing."        
        	OrderObserver "Notified when changes are made to the order's state."
        }
    
	    workflow {
	    	    		
    		summary "Processes an order."
    		description "Processes an order."
	    	
       	 	transaction ProcessOrder<MarketplaceOrder> {
        		roles(SalesChannel, OrderProcessor)
        	}
        	
	        any {
	        	workflow CustomerUpsert {
	        		    		
    				summary "Adds a customer or updates an existing customer." 
    				description "Adds a new customer or updates the information of an existing customer based on whether the customer exists."
	        		
	    			roles(OrderProcessor, null, null)
	    		}
	    	}
	    	
			workflow OrderCreated<MarketplaceOrder> {
			   	roles(OrderProcessor, OrderObserver)
			}
	    	
	    	do (!order[Order.Complete]) {  
	    		any {
	    			noop //TN: Noop added to allow for polling semantic	
		    		
		    		workflow OrderAdjusted {
		    			roles(OrderProcessor, OrderObserver)
		    		}
		    		
		    		workflow OrderReturned {
		    			roles(OrderProcessor, OrderObserver)
		    		}
		    	
		    		workflow OrderPartiallyReturned {
		    			roles(OrderProcessor, OrderObserver)
		    		}
		    		
		    		workflow OrderPartiallyShipped {
		    			roles(OrderProcessor, OrderObserver)
		    		}
		    		
		    		workflow OrderPartiallyCancelled {
		    			roles(OrderProcessor, OrderObserver)
		    		}
		    		
		    		transaction PaymentUpdate<MarketplaceOrder> {
		    			roles(SalesChannel, OrderProcessor)
		    		}
		    		
	    			transaction CompleteOrder {
	    				roles(OrderProcessor, OrderObserver)
	    			}
		    		
		        	any {  
			        	// An order processor updates shipment tracking information for an order
			        	transaction OrderShipped<MarketplaceOrder> {
			        		roles(OrderProcessor, SalesChannel)
			        	}
			        	
			        	workflow ObserveOrderShipped<MarketplaceOrder> {
			        		roles(OrderProcessor, OrderObserver)
			        	}
			        }
	        	
		        	any {
			        	do {
							// A canceller asks the processer to cancel its order 
							transaction CancelOrder<MarketplaceOrder> {
							   	roles(SalesChannel, OrderProcessor)
							}
							workflow OrderCancelled<MarketplaceOrder> {
						   		roles(OrderProcessor, OrderObserver)
						   	}
						}
						
						// The order processor informs observers that an order was cancelled
						workflow OrderCancelled<MarketplaceOrder> {
						   	roles(OrderProcessor, OrderObserver)
						}
					}
				}
			}
		}
   }
	
   process ProcessNonSalesChannelOrder<MarketplaceOrder>(Order order) {
    	
    	summary "Processes an order that was already created and is not associated with a sales channel."
        description "An existing order is processed by making adjustments, changing the status, etc. and notifies observers of the action performed. Note: Use OrderReturn ONLY when all the items in an order are returned at the same time. For all other returns, use PartialOrderReturn. For example, a buyer orders two items. Returns one item and later returns the second item. You would use PartialOrderReturn for both of these returns."
        
        roles {
        	OrderProcessor "Performs the order processing."
        	OrderObserver "Informed of the processing that happened."        
        }    
    
	    workflow {
	    	
			workflow OrderCreated<MarketplaceOrder> {
			   	roles(OrderProcessor, OrderObserver)
			}
	    	
	    	do (!order[Order.Complete]) {  
	    		any {
	    			noop //TN: Noop added to allow for polling semantic	
		    		
		    		workflow OrderAdjusted {
		    			roles(OrderProcessor, OrderObserver)
		    		}
		    		
		    		workflow OrderReturned {
		    			roles(OrderProcessor, OrderObserver)
		    		}
		    	
		    		workflow OrderPartiallyReturned {
		    			roles(OrderProcessor, OrderObserver)
		    		}
		    		
		    		workflow OrderPartiallyCancelled {
		    			roles(OrderProcessor, OrderObserver)
		    		}
		    		
		    		workflow OrderPartiallyShipped {
		    			roles(OrderProcessor, OrderObserver)
		    		}
		    		
		    		transaction CompleteOrder {
	    				roles(OrderProcessor, OrderObserver)
	    			}
		    		
		        	workflow ObserveOrderShipped<MarketplaceOrder> {
		        		roles(OrderProcessor, OrderObserver)
		        	}
	        						
					workflow OrderCancelled<MarketplaceOrder> {
					   	roles(OrderProcessor, OrderObserver)
					}
				}
			}
		}
	}
	
	process OrderCancelled <MarketplaceOrder> {
		summary "Notification that an order was cancelled."
		description "Notification that an order was cancelled."
		
		roles {
         	OrderProcessor "Sends a notification that an order was cancelled."
        	OrderObserver "Receives an order cancelled notification."      
        }
	}
	
	workflow OrderCancelled implements OrderCancelled {
		summary "Notification that an order was cancelled."
		description "OrderProcessor send a notification that an order was cancelled to observers."
			
		transaction OrderCancelled<MarketplaceOrder> {
			roles(OrderProcessor, OrderObserver)
		}	
	}
	
	process OrderCreated {
		summary "Notification that an order was created."
		description "Notification that an order was created."
		
		roles {
         	OrderProcessor "Sends a notification that an order was created."
        	OrderObserver "Receives an order created notification."      
        }
	}
	
	workflow OrderCreated implements OrderCreated {
		summary "Notification that an order was created."
		description "OrderProcessor send a notification that an order was created to observers."
		
		transaction OrderCreated {
			roles(OrderProcessor, OrderObserver)
		}	
	}
	
	process OrderAdjusted {
		summary "Notification that an order was adjusted."
		description "Notification that an order was adjusted."
		
		roles {
         	OrderProcessor "Sends a notification that an order was adjusted."
        	OrderObserver "Receives an order adjusted notification."      
        }
	}
	
	workflow OrderAdjusted implements OrderAdjusted {
		summary "Notification that an order was adjusted."
		description "OrderProcessor send a notification that an order was adjusted to observers."
		
		transaction OrderAdjust {
	        roles(OrderProcessor, OrderObserver)
		}	
	}
	
	process OrderReturned {
		summary "Notification that an order was returned."
		description "Notification that an order was returned."
		
		roles {
         	OrderProcessor "Sends a notification that an order was returned."
        	OrderObserver "Receives an order returned notification."      
        }
	}
	
	workflow OrderReturned implements OrderReturned {
		summary "Notification that an order was returned."
		description "OrderProcessor send a notification that an order was returned to observers."
			
		transaction OrderReturn {
	        roles(OrderProcessor, OrderObserver)
		}	
	}
	
	process OrderPartiallyReturned {
		summary "Notification that an order was partially returned."
		description "Notification that an order was partially returned."
		
		roles {
         	OrderProcessor "Sends a notification that an order was partially returned."
        	OrderObserver "Receives an order returned notification."      
        }
	}
	
	workflow OrderPartiallyReturned implements OrderPartiallyReturned {
		summary "Notification that an order was partially returned."
		description "OrderProcessor send a notification that an order was returned to observers."
			
		transaction PartialOrderReturn {
		    roles(OrderProcessor, OrderObserver)
		}	
	}
	
	process OrderPartiallyShipped {
		summary "Notification that an order was partially shipped."
		description "Notification that an order was partially shipped."
		
		roles {
         	OrderProcessor "Sends a notification that an order was partially shipped."
        	OrderObserver "Receives an order shipped notification."      
        }
	}
	
	workflow OrderPartiallyShipped implements OrderPartiallyShipped {
		summary "Notification that an order was partially shipped."
		description "OrderProcessor send a notification that an order was shipped to observers."
			
		transaction PartialOrderShip {
		    roles(OrderProcessor, OrderObserver)
		}	
	}
	
	process OrderPartiallyCancelled {
		summary "Notification that an order was partially cancelled."
		description "Notification that an order was partially cancelled."
		
		roles {
         	OrderProcessor "Sends a notification that an order was partially cancelled."
        	OrderObserver "Receives an order cancelled notification."      
        }
	}
	
	workflow OrderPartiallyCancelled implements OrderPartiallyCancelled {
		summary "Notification that an order was partially cancelled."
		description "OrderProcessor send a notification that an order was cancelled to observers."
			
		transaction PartialOrderCancel {
		    roles(OrderProcessor, OrderObserver)
		}	
	}
	
	process ObserveOrderShipped<MarketplaceOrder> {
		summary "Notification that an order was shipped."
		description "Notification that an order was shipped."
		
		roles {
         	OrderProcessor "Sends a notification that an order was shipped."
        	OrderObserver "Receives an order returned notification."      
        }
	}
	
	workflow ObserveOrderShipped implements ObserveOrderShipped {
		summary "Notification that an order was shipped."
		description "OrderProcessor send a notification that an order was returned to observers."
			
		transaction ObserveOrderShipped<MarketplaceOrder> {
		    roles(OrderProcessor, OrderObserver)
		}	
	}
}
