/*
 * This package defines transactions used by messages in com.x.xocl.comparisonshopping
 */

package com.x.comparisonshopping.v1
{	
	import com.x.comparisonshopping.v1.*
	
	transaction GetAllComparisonShoppingProviders broadcast query {
        description "Retrieves a list of all the CSE providers for a tenant."
        
        sender {
        	message GetAllComparisonShoppingProviders {
        		 timeouts(response=30s)
        		 //In a broadcast query, the client should wait for the entire timeout before assuming all 
        		 //available channels have responded     		
        	}
        }
        receiver {
        	success GetAllComparisonShoppingProvidersSucceeded {  		
        	} 
        	//there is no failure message here because the implementation should not respond if it cannot identify itself                	
        } 
    }
	
	// Start the processing of a new data feed
	transaction StartDataFeed response {
		description "Signal the beginning of a new data feed."
		
        sender {
        	message StartDataFeed {        		
				// Timeouts for the receiver to acknowledge message receipt and/or message validation
        		timeouts(receipt=3s, validation=5s, response=10s)
        		
        		// How many times should we retry if one of the timeouts expires? 
        		retries=3
        	}
        }
        
        receiver {
	       	success StartDataFeedSuccess {
            	timeouts(receipt=3s, validation=5s)
            	retries=3
            }
            
            failure StartDataFeedFailure
        }        
	} 
	
	transaction CompleteDataFeed response {
		description "Signal the end of processing for a data feed that is being published."
		
        sender {
        	message CompleteDataFeed {        		
				// Timeouts for the receiver to acknowledge message receipt and/or message validation
        		timeouts(receipt=3s, validation=5s, response=10s)
        		
        		// How many times should we retry if one of the timeouts expires? 
        		retries=3
        	}
        }
        
        receiver {
	       	success CompleteDataFeedSuccess {
            	timeouts(receipt=3s, validation=5s)
            	retries=3
            }
            
            failure CompleteDataFeedFailure
        }
	} 
		    
    // Publish products as part of a product feed
    transaction PublishProducts notify {
    	description "Send a single product to a comparison shopping engine."
    	
        sender {
        	message PublishProducts {        		
        		timeouts(receipt=3s, validation=5s)
        		retries=3
        	}
        }
    }

	// CSE sends a message back to the published indicating that status of the published feed    
    transaction ProductFeedProcessed notify {
    	description "Notifies the publisher that the supplied product feed was processed."
    	
    	sender {
    		message ProductFeedProcessed {
        		timeouts(receipt=3s, validation=3m)
           		retries=3
    		}
    	}
    }
    
    // Publish store offers item as part of an store offer feed
    transaction PublishStoreOffers notify {
    	description "Send a single store offer item to a comparison shopping engine."
    	
    	// Send an inventory item to the CSE
        sender {
        	message PublishStoreOffers {   		
        		timeouts(receipt=3s, validation=5s)
        		retries=1
        	}
        }
    }
     
    transaction StoreOfferFeedProcessed notify {
    	description "Notifies the publisher that the supplied inventory feed was processed."
    	
    	sender {
    		message StoreOfferFeedProcessed {
        		timeouts(receipt=3s, validation=1m)
           		retries=3
    		}
    	}
    }
    
    // Publish stores as part of a store feed
    transaction PublishStores notify {
    	description "Send a single store to a comparison shopping engine."
    	
        sender {
        	message PublishStores {        		
        		timeouts(receipt=3s, validation=3s)
        		retries=1
        	}
        }
    }
    
    // CSE sends a message back to the published indicating that status of the published feed    
    transaction StoreFeedProcessed notify {
    	description "Notifies the publisher that the supplied store feed was processed."
    	
    	sender {
    		message StoreFeedProcessed {
        		timeouts(receipt=3s, validation=1m)
           		retries=3
    		}
    	}
    }
}