/*
 * This package defines types used by messages in com.x.comparisonshopping
 */

package com.x.comparisonshopping.v1 {
	
	import com.x.core.v1.*

	enum ConditionType {
		summary "Specifies the condition of a product."
		description "Defines the condition values available for a product."

		NEW "Indicates the product is new."
		RECONDITIONED "Indicates a product was returned in like new condition."
		USED "Indicates a product shows wear."
	}

	enum ImagePurpose {
		summary "Specifies the product image type."
		description "Defines the values used to specify the product image type."

		HERO "Indicates the images is the primary full-sized image of a product.", 
		GALLERY "Indicates the image is to be used in the gallery.",
		THUMBNAIL "Indicates the image is a small thumbnail picture."
	}
	
	enum ImageBackgroundType {
		summary "Specifies the background used by a product image."
		description "Defines the values used to specify the background of a product image."

		HAS_BACKGROUND "Indicates the product image has a background.",
		NO_BACKGROUND "Indicates the product image doesn't have a background.",
		UNKNOWN "Indicates you don't know if the image has a background."
	}
	
	enum AvailabilityType {
		summary "Specifies the product availability status for each offered product."
		description "Defines the values used to identify the availability of a product."

		IN_STOCK "Indicates the product is in stock and ready to ship within the required number of days.",
		OUT_OF_STOCK "Indicates the product is currently out of stock.",
		AVAILABLE_FOR_ORDER "Indicates the product is not in stock but can be ordered.",	
		UNKNOWN "Indicates that the availability of the product is not known."
	}
	
	enum DataFeedType {
		summary "Specifies the data feed classification."
		description "Defines the values used to classify a data feed."

		FULL "Indicates the feed contains a full list of all the items to be published.",
		INCREMENTAL "Indicates the feed contains an incremental set of items to be published."
		UPDATE "Indicates the feed contains only items that are to be updated."
	}
			
	enum DataFeedContentType {
		summary "Classifies the content of the data feed."
		description "Classifies the content of the data feed."

		PRODUCT "Indicates the feed contains products.",
		STORE_OFFER "Indicates the feed contains store offers."
		STORE "Indicates the feed contains stores."
	}
	
	record ProductAttribute {
		summary "Contains the product label/value pairs."
		description "Captures the various label/value pairs that are collected and associated as attributes with a product."

		string id "Unique identifier of this attribute."
		string label "Label that describes the attribute. For example, Brand."
		string value "Value of the label. For example: Nike."
	}
	
	record ProductImage {
		summary "Contains information needed for a product image."
		description "Captures the product image URL, the image purpose, and the image background type."

		string imageUrl "URL (location) of the image file."
		ImagePurpose imagePurpose "Role associated with the image."
		ImageBackgroundType backgroundType "Background state of the product image."
	}
	
	record TaxRate {
		summary "Contains the rate at which an offered product is taxed according to country and region."
		description "Captures the country, region, tax rate, and whether to charge tax on the cost of shipping information."

		string country "Country where the taxes are being applied."
		string region "Region (state) where the taxes are being applied."
		double rate "Tax rate that will be used to calculate taxes."
		boolean taxShipping "Determines whether to charge tax on the shipping cost."
	}
	
	record Shipping {
	 	summary "Contains the type of service used to ship an offered product."
	 	description "Captures the country and region where the product will be delivered, the shipping service to use, and the flat rate cost to ship the product."

	 	string country "Country where the product will be delivered."
	 	string region "Region (state) country where the product will be delivered."
	 	string service "Shipping service (ground, air, etc.) that will be used when the product is shipped."
	 	CurrencyAmount price "Amount that will be charged to ship the product."
	}
	
	record Variation {
		summary "Contains the product variation definition."
		description "Captures the ID, name, and single value for variation."

		string? id "Unique identifier for this variation."
		string name "Label name for the variation."
		string value "Value assigned to the variation."
	}
	
	record GetAllComparisonShoppingProviders {
        summary "Retrieve a list of CSE providers."
        description "Sends a request to retrieve a list of all the CSE providers for a tenant."
	}
	
    record GetAllComparisonShoppingProvidersSucceeded {
    	summary "Signals that the search for providers was successful."
    	description "Notification that searching for providers was successful. Returns the search results and the query request."

		string providerName
		string? providerDescription
	    //Caller must get destination ID from header - X-XC-PUBLISHER-ID
	}
	
	record StartDataFeed {
		summary "Contains data that describes the data feed that was started."
		description "Captures the ID, name, feed type, and start date for a data feed."

		string id "Unique identifier for this data feed."
		string? name "Name assigned to this data feed."
		DataFeedType feedType = FULL "Classification of this feed being started. The default is FULL."
		DataFeedContentType feedContentType "Determines the type of content (product, store offer, and stores) are in this feed."
		datetime startDate "Date and time when the feed was started."
		string? xAccountId "Account ID that will be used for this data feed."		
	}
	
	record StartDataFeedSuccess {
		summary "Contains data that describes a successful data feed start."
		description "Provides the ID, name, and start date of the feed that was started."

		string id "Unique identifier for this data feed that started."
		string? name "Name assigned to this data feed that started."
		datetime startDate "Date and time when the feed was started."
	}
	
	record StartDataFeedFailure {
		summary "Contains data that describes a failed data feed start."
		description "Provides the ID, name, and start date of the feed that failed to start."

		string id "Unique identifier for this data feed."
		string? name "Name assigned to this data feed."
		datetime startDate "Date and time when the feed was started."
	}
	
	record CompleteDataFeed {
		summary "Contains data that describes the data feed that was completed."
		description "Captures the ID of the data feed that was completed."

		string id "Unique identifier for the data feed being completed."
	}
	
	record CompleteDataFeedSuccess {
		summary "Contains data that describes a successful data feed completion."
		description "Provides the ID and date/time the feed successfully was completed."

		string id "Unique identifier for this data feed that completed."
		datetime endDate "Date and time when the feed ended."
	}
	
	record CompleteDataFeedFailure {
		summary "Contains data that describes a failure of a data feed completion."
		description "Provides the ID of the data feed that failed to be completed."

		string id "Unique identifier for this data feed that could not be completed."
	}
	
	record Store {
		summary "Contains data that describes a physical store location."
		description "Provides all the basic attributes of a store location."
		
		string storeId "Unique identifier of a store."
		string? name "Name of a store."
		string? storeDescription "Description of the store."
		Address? address "Address of the store."
		string? latitude "Latitude associated with the store's location."
		string? longitude "Longitude associated with the store's location."
		string phone "Store's primary phone number."
		string? tollFreePhone "Store's toll free phone number."
		array<string>? hoursOfOperation "Collection of hours of operation for the store."
		string? category "Category associated with the store."
		string currency "Currency the store accepts."
		datetime? establishedDate "Date the store was opened."
		array<string>? paymentOptions "Types of payment accepted by the store."
		string? email "Email address of the store."
		array<string>? brands "Brands sold by the store."
		boolean shipFromStore = false "Indicates whether the store support shipping directly from the store. The default is false."
		boolean eligibleForInStorePickup = false "Indicates whether the store support in-store pickup. The default is false."
		boolean onlineStore = false "Indicates whether this store is on online store. The default is false."
		string? onlineStoreUrl "URL of the online store."
		array<string>? photoUrls "URLs of the images associated with the store."
		string? logoUrl "URL of the store's logo."
		array<string>? services "Services provided by the store."
	}
	
	record StoreOffer {
		summary "Contains data that describes inventory levels and pricing at a given location."
		description "Provides the all the attributes needed to represent inventory levels, pricing, etc. at a store location."
		
		string storeId "Unique identifier for the store where this inventory resides."
		string sku "Standardized SKU (Stock Keeping Unit) of the product. This is a unique number supplied by the merchant."
		Store? store "Store where this inventory resides."
		boolean eligibleForInStorePickup = false "Whether a shopper can visit the location to pickup the product. The default is false."
		CurrencyAmount? price "Overrides of the price. If omitted the price will be taken from the product."
		CurrencyAmount? originalPrice "Overrides for the original price. If omitted the original price will be taken from the product."
		int? quantity "How many of a product are at this location."
		AvailabilityType availability = UNKNOWN "True with no quantity specified if inventory is not tracked. The default is UNKNOWN."
		datetime? availableDate "Timestamp specifying when the item will be available."
		boolean shipFromStore = false "Whether this item is available to be shipped from this location. The default is false." 
  		array<ProductAttribute>? attributes "Name/value attributes pairs used to represent inventory attributes."
 	}
	
	record Product {
		summary "Contains the product information needed to represent a product on a comparison shopping engine channel."
		description "Captures all the product information needed to represent a product on a comparison shopping engine channel, such as quantity, title, SKU, category, etc."

		string sku "Standardized SKU (Stock Keeping Unit) of the product. This is a unique number supplied by the merchant."
		string? itemGroup "Identifier that groups together all the variation values for this product (if it has variations)."
		CurrencyAmount? price "Price to purchase the product."; 
		int quantity "How many of this product are in stock.";
   		string title "Title of the product."
   		string productDescription "Description of the product.";
   		string? manufacturer "Name of the manufacturer/supplier of the product."
   		string? mpn "Manufacturer part number of the product."
   		string? gtin "Global Trade Item Number for the product that can represent UPC, EAN, JAN, or ISBN (the type is inferred from the format)."
   		string? brand "Brand name of the product."
   		string? category "Category that will be used to determine where the product will appear in the comparison shopping engine taxonomy."
   		string? xProductTypeId  "Product type identifier as defined by the taxonomy manager." 
   		array<string>? productTypes "Product types associated with the product as defined by the taxonomy manager."
   		array<ProductImage>? images  "Collection of  URLs for the product images (with assigned roles)."
   		string link "Link to the product landing page on the merchant's storefront."
   		CurrencyAmount? originalPrice "Original price of the item before any discounting."
   		AvailabilityType availability = UNKNOWN "Availability status of the product. The default is UNKNOWN."
		datetime? availableDate "Timestamp specifying when the item will be available."
   		TaxRate? taxRate "Tax rate based on the country and region of the product's location (where the product is shipped from)."
   		Shipping? shipping "Shipping profile of a product and its shipping price."
   		double? shippingWeight "Shipping weight of the product."
   		array<ProductAttribute>? attributes "Name/value attributes pairs used to represent product attributes."
   		array<Variation>? variations "Collection of variations associated with the product."
   		CurrencyAmount? cpc "Amount the merchant is willing to pay per click (cost per click)."
   		string? channelId "Identifier of the comparison shopping engine channel."
   		array<StoreOffer>? storeOffers "Collection of store offers levels by physical location."
   		ConditionType condition = NEW "Condition of the product. The default is NEW."
   		string language = "en_US" "County and language code. The format for locale is aa_BB, where aa is a 2-letter language code (ISO 639-1) and BB is a 2-letter country code (ISO 3166). For example, fr_FR ( French/France) or ja_JP  (Japanese/Japan). If this is not provided, en_US is used."
   		boolean onlineOnly =  false "Whether the product is available only online. The default is false." 
		boolean shipFromStore = false "Whether this item is available to be shipped from this location. The default is false." 
		boolean eligibleForInStorePickup = false "Whether a shopper can visit the location to pickup the product. The default is false."
	}
		
	record PublishProducts {
		summary "Contains information for the product is being published."
		description "Publishes products, inventory, and locations (stores) to a comparison shopping engine."
		
		string feedId "ID of the feed that is associated with these products."
		array<Product> products "Products being published."
	}
	
	record ProductFeedProcessed {
		summary "Signals that the product feed file was processed."
    	description "Notifies the publisher that the supplied product feed was processed."
    	
    	string feedId "Identifier of the feed that was processed."
    	int numSuccessful "The number of records that sucessfully processed."
    	int numFailed "The number of records that failed during processing."
    	string statusMessage "A detailed description of the processing status. May include explanations for failture reasons."
    }
	
	record PublishStoreOffers {
		summary "Contains information for the product inventory is being published."
		description "Publishes product inventory to a comparison shopping engine."
		
		string feedId "Identifier of the feed that is associated with these store offers."
		array<StoreOffer> storeOffers "Store offers being published."
	}
	
	record StoreOfferFeedProcessed {
		summary "Signals that the supplied store offer feed was processed."
    	description "Notifies the publisher that the supplied store offer feed was processed."
    	
    	string feedId "Identifier of the feed that was processed."
    	int numSuccessful "The number of records that sucessfully processed."
    	int numFailed "The number of records that failed during processing."
    	string statusMessage "A detailed description of the processing status. May include explanations for failture reasons."
    }
	
	record PublishStores {
		summary "Contains information for the stores is being published."
		description "Publishes a stores to a comparison shopping engine."
		
		string feedId "Identifier of the feed that is associated with these stores."
		array<Store>? stores "Stores being published."
	}
	
	record StoreFeedProcessed {
		summary "Signals that the store feed was processed."
    	description "Notifies the publisher that the supplied store feed was processed."
    	
    	string feedId "Identifier of the feed that was processed."
    	int numSuccessful "The number of records that sucessfully processed."
    	int numFailed "The number of records that failed during processing."
    	string statusMessage "A detailed description of the processing status. May include explanations for failture reasons."
    }
	

}
