/**
 * This is a autogenerated using the com.x.ocl:xocl-maven-plugin:1.4.18 maven plugin.
 * The contents are generated from the following XOCL files:
 *            jsongeneratorschema.messages.xocl
 * DO NOT EDIT THIS FILE DIRECTLY
 */
@namespace("com.x.jsongeneratorschema.v1")
@status("earlydraft")
protocol com_x_jsongeneratorschema_v1 {

	record ElseNodeDetails {
		string ifNodeId;
  	}

	enum TransactionPublishMode {
		REGULAR,
		BROADCAST,
		UNICAST
	}

	record XoclContractRole {
		string id;
 		union{null,string} workflowId = null;
 		union{null,string} variant = null;
 		string url;
  	}

	record XoclContract {
		string id;
 		array<XoclContractRole> roles;
  	}

	record XoclContractBinding {
		XoclContract contract;
 		union{null,string} description = null;
 		union{null,string} cardinality = null;
 		union{null,boolean} latebound = null;
  	}

	enum Operator {
		AND,
		OR,
		NOT
	}

	record SubWorkflowNodeDetails {
		string embeddedWorkflowId;
 		array<union{null, string}> roles;
  	}

	enum TransactionRole {
		SENDER,
		RECEIVER
	}

	record Documentation {
		union{null,string} summary = null;
 		union{null,string} description = null;
  	}

	record XoclBundle {
		string writerSchemaVersion;
 		string id;
 		string version;
 		string status;
 		union{null,Documentation} documentation = null;
 		array<XoclContractBinding> bindings;
  	}

	record XoclWorkflowDocumentation {
		union{null,string} summary = null;
 		union{null,string} description = null;
 		string implementedProcess;
 		union{null,Documentation} processDocumentation = null;
  	}

	record EndpointNodeDetails {
		string name;
  	}

	record TransactionNodeCompleteDetails {
		string senderRole;
 		string receiverRole;
 		string transactionId;
  	}

	enum TimeUnit {
		SECONDS,
		MINUTES,
		HOURS,
		DAYS
	}

	record Timeout {
		int value;
 		TimeUnit unit;
  	}

	record TransactionTimeouts {
		union{null,Timeout} receiptTimeout = null;
 		union{null,Timeout} validationTimeout = null;
 		union{null,Timeout} responseTimeout = null;
  	}

	record TransactionAction {
		string messageName;
 		string topic;
 		union{null,TransactionTimeouts} timeouts = null;
 		union{null,int} retries = null;
  	}

	enum TransactionType {
		INFORM,
		NOTIFY,
		RESPONSE,
		QUERY
	}

	enum NodeType {
		TRANSACTION,
		DO,
		ANY,
		SUBWORKFLOW,
		ONE,
		ALL,
		NOOP,
		IF,
		ELSE,
		ENDPOINT
	}

	record ParamExpression {
		string name;
 		string state;
  	}

	record FunctionParam {
		union{string, ParamExpression} param;
  	}

	record FunctionExpression {
		string functionName;
 		array<FunctionParam> params;
  	}

	record Expression {
		union{null,Expression} leftOperand = null;
 		union{null,Operator} operator = null;
 		union{null,Expression} rightOperand = null;
 		union{null,ParamExpression} param = null;
 		union{null,FunctionExpression} function = null;
  	}

	record IfNodeDetails {
		Expression conditionExpression;
  	}

	record DoNodeDetails {
		union{null,Expression} iterationCondition = null;
 		union{null,string} iterationCountLowerBound = null;
 		union{null,string} iterationCountUpperBound = null;
  	}

	record Transaction {
		string id;
 		union{null,Documentation} documentation = null;
 		TransactionType type;
 		union{null,TransactionPublishMode} publishMode = null;
 		TransactionAction senderAction;
 		union{null,TransactionAction} receiverSuccessAction = null;
 		union{null,TransactionAction} receiverFailureAction = null;
 		union{null,array<Expression>} preconditions = null;
 		union{null,array<Expression>} successPostconditions = null;
 		union{null,array<Expression>} failurePostconditions = null;
  	}

	record TransactionNodeDetails {
		TransactionRole role;
 		Transaction transaction;
  	}

	record Node {
		string id;
 		NodeType type;
 		union{null, TransactionNodeDetails, TransactionNodeCompleteDetails, DoNodeDetails, SubWorkflowNodeDetails, IfNodeDetails, ElseNodeDetails, EndpointNodeDetails} details;
 		union{null,Timeout} timeout = null;
 		union{null,array<Node>} nodes = null;
  	}

	record LocalWorkflow {
		string writerSchemaVersion;
 		string id;
 		string version;
 		string role;
 		union{null,Timeout} timeout = null;
 		array<Node> nodes;
 		union{null,array<Expression>} preconditions = null;
 		union{null,array<Expression>} successPostconditions = null;
 		union{null,array<Expression>} failurePostconditions = null;
  	}

	record Workflow {
		LocalWorkflow localWorkflow;
  	}

	record XoclWorkflow {
		string id;
 		union{null,XoclWorkflowDocumentation} documentation = null;
 		array<string> roles;
 		union{null,Timeout} timeout = null;
 		array<Node> nodes;
 		union{null,array<Expression>} preconditions = null;
 		union{null,array<Expression>} successPostconditions = null;
 		union{null,array<Expression>} failurePostconditions = null;
  	}

	record XoclPkg {
		string writerSchemaVersion;
 		string version;
 		string status;
 		union{null,Documentation} documentation = null;
 		array<Transaction> transactions;
 		array<XoclWorkflow> workflows;
 		array<XoclContract> contracts;
 		array<XoclBundle> bundles;
  	}


}